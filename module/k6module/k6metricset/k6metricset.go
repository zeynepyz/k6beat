package k6metricset

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/elastic/beats/v7/libbeat/common"
	"github.com/elastic/beats/v7/libbeat/common/cfgwarn"
	"github.com/elastic/beats/v7/metricbeat/mb"
	"github.com/elastic/elastic-agent-libs/logp"
)

// init registers the MetricSet with the central registry as soon as the program
// starts. The New function will be called later to instantiate an instance of
// the MetricSet for each host defined in the module's configuration. After the
// MetricSet has been created then Fetch will begin to be called periodically.
func init() {
	mb.Registry.MustAddMetricSet("k6module", "k6metricset", New)
	print("selam")
}

// MetricSet holds any configuration or state information. It must implement
// the mb.MetricSet interface. And this is best achieved by embedding
// mb.BaseMetricSet because it implements all of the required mb.MetricSet
// interface methods except for Fetch.
type MetricSet struct {
	mb.BaseMetricSet
	counter int
}

// New creates a new instance of the MetricSet. New is responsible for unpacking
// any MetricSet specific configuration options if there are any.
func New(base mb.BaseMetricSet) (mb.MetricSet, error) {
	cfgwarn.Beta("The k6module k6metricset metricset is beta.")
	println("MyMetricSet: Starting to collect metrics")

	config := struct{}{}
	if err := base.Module().UnpackConfig(&config); err != nil {
		return nil, err
	}

	return &MetricSet{
		BaseMetricSet: base,
		counter:       1,
	}, nil
}

// Fetch methods implements the data gathering and data conversion to the right
// format. It publishes the event which is then forwarded to the output. In case
// of an error set the Error field of mb.Event or simply call report.Error().
func (m *MetricSet) Fetch(report mb.ReporterV2) error {
	endpoints := []string{
		"http://localhost:6565/v1/metrics/http_req_receiving",
		"http://localhost:6565/v1/metrics/http_reqs",
		// İhtiyaç duyulan diğer adresleri buraya ekleyin
	}

	for _, endpoint := range endpoints {
		// k6'e HTTP isteği göndermek için net/http paketini kullanın
		resp, err := http.Get(endpoint) // isteği uygun şekilde yapılandırın
		if err != nil {
			// Hata durumunda raporlayın veya Error alanını ayarlayın
			return err
		}
		defer resp.Body.Close()

		// K6'dan gelen yanıtı okuyun
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			logp.Err("Error reading stats: %v", err)
			return err
		}

		// Yanıtı uygun bir formata dönüştürün (örneğin, JSON)
		var data AutoGenerated
		err = json.Unmarshal(body, &data)
		if err != nil {
			logp.Err("Error unmarshal: ", err)
			return err
		}

		// Elasticsearch'e göndermek üzere verileri formatlayın
		event := common.MapStr{
			"data": common.MapStr{
				"id": data.Data.ID,
				"attributes": common.MapStr{
					"sample": common.MapStr{},
				},
			},
		}

		if data.Data.Attributes.Sample.Rate != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["rate"] = data.Data.Attributes.Sample.Rate
		}

		if data.Data.Attributes.Sample.Value != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["value"] = data.Data.Attributes.Sample.Value
		}

		if data.Data.Attributes.Sample.Avg != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["avg"] = data.Data.Attributes.Sample.Avg
		}

		if data.Data.Attributes.Sample.Max != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["max"] = data.Data.Attributes.Sample.Max
		}

		if data.Data.Attributes.Sample.Med != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["med"] = data.Data.Attributes.Sample.Med
		}

		if data.Data.Attributes.Sample.P90 != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["p(90)"] = data.Data.Attributes.Sample.P90
		}

		if data.Data.Attributes.Sample.P95 != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["p(95)"] = data.Data.Attributes.Sample.P95
		}

		if data.Data.Attributes.Sample.Count != 0 {
			event["data"].(common.MapStr)["attributes"].(common.MapStr)["sample"].(common.MapStr)["count"] = data.Data.Attributes.Sample.Count
		}

	}

	m.counter++

	return nil
}
